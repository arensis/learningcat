[
{
	"uri": "https://learningcat.tk/4_arduino/1_nodemcuboard/1_configboard/",
	"title": "Configurar placa",
	"tags": [],
	"description": "",
	"content": "Preparar IDE para poder usar la placa Las placas NodeMCU no están dentro del listado que incorpora el IDE, por ello tendremos que añadirlo en el IDE e instalar un pluggin que nos permitirá usar el IDE de Arduino con este tipo de placas.\n  Añadir tarjetas adicionales al IDE El primer paso es añádir la URL que incorpora las nuevas tarjetas de tipo ESP826 al IDE, para ello abriremos las preferencias del IDE: Archivo \u0026gt; Preferencias\nUna vez en las preferencias del IDE tendremos que incluir la siguiente URL en el apartado Gestor de URLs Adicionales de Tarjetas:\nhttp://arduino.esp8266.com/stable/package_esp8266com_index.json\nPara aplicar los cambios bastará con pulsar el botón de Ok de la ventana de Preferencias\n  Instalando el controlador para placas con ESP8266 Una vez añadido el repositorio de placas tendremos que instalar los controladores en el gestor de placas, para ello vamos a: Herramientas \u0026gt; Placa \u0026gt; Gestor de tarjetas, en el buscador escribiremos ESP8266 e instalaremos el que nos aparece como ESP8266 Community\n  Seleccionando la placa de desarrollo Una vez instalados los controladores de las placas ya podremos seleccionar nuestra placa: Herramientas \u0026gt; Placa \u0026gt; ESP8266 Boards \u0026gt; NodeMCU 1.0 (ESP-12E Module)\n  Seleccionar puerto serial para la comunicación con la placa   Windows o MacOSX Simplemente podremos seleccionarlo yendo a: Herramientas \u0026gt; Puerto \u0026gt; COM1 /COM7\n  Linux Seleccionaremos el puerto que nos aparezca como USB o ACM: Herramientas \u0026gt; Puerto \u0026gt; ttyUSB0 / ttyACM0 el número final puede variar Es posible que al tartar de subir el codigo a nuestra placa nos muestre un error de permisos al tratar de acceder al puerto, si fuera así necesitaríamos proporcionar permisos a nuestro usuario para poder acceder al puerto.\n  Mostrar la información de los puertos disponibles Para mostrar la información del grupo al que pertenece el puerto que necesitamos agregar los permisos tendremos que ejecutar el siguiente comando:\n  Si nos aparecía disponible el puerto ttyUSB habría que ejecutar:\n$ ls -l /dev/ttyUSB*   Si nos aparecía disponible el puerto ttyACM habría que ejecutar:\n$ ls -l /dev/ttyACM*   El comando puede devolvernos una respuesta similar a estas dos:\n $ crw-rw---- 1 root uucp 188, 0 5 apr 23.01 ttyUSB0 $ crw-rw---- 1 root dialout 188, 0 5 apr 23.01 ttyACM0  Con esto podremos saber al grupo al que pertence el puerto, en el primer caso sería uucp y en el segundo dialout\nY de esta manera podremos añadir nuestro usuario al grupo con el siguiente comando:\n  Para el primer caso:\n$ usermod -a -G uucp nuestroUsuarioDeLinux   Para el segundo caso:\n$ usermod -a -G dialout nuestroUsuarioDeLinux   Una vez realizado necesitaríamos reiniciar el equipo para que se apliquen los cambios en los permisos, podremos ver si tenemos nuestro usuario pertenece a ese grupo listando todos los grupos a los que pertence nuestro usuario mediante el siguiente comando:\n$ groups nuestroUsuarioDeLinux Para poder probar en el IDE que todo fue correctamente, seleccionamos el puerto al que hemos proporcionado permisos y cargamos un código de ejemplo en la placa: Archivo \u0026gt; Ejemplos \u0026gt; Ejemplos para NodeMCU 1.0 (ESP-12E Module) \u0026gt; ESP8266 \u0026gt; Blink\nEste ejemplo hará que el led del módulo wifi de la placa parpadee cada dos segundos. Si todo funciona correctamente ya tendríamos configurada nuestra placa con el IDE de Arduino.\n      "
},
{
	"uri": "https://learningcat.tk/4_arduino/1_arduinoide/",
	"title": "Descarga e instalación del IDE",
	"tags": [],
	"description": "",
	"content": "Descarga El IDE de arduino con el que podremos desarrollar el código, compilarlo y cargarlo en la placa de desarrollo se puede descargar gratuitamente desde la web de Arudino:\nhttps://www.arduino.cc/en/Main/Software\nInstalación   Windows / MacOSX Si eres usuario de Windows o MacOSX descargarás un ejecutable (exe o dmg respectivamente) con un asistente sencillo de instalación\n  Linux   Descompresión de los ficheros del IDE Si por el contrario usas linux descargarás un tar.xz, para descomprimir los archivos podrás hacerlo haciendo doble click sobre él para abrirlo con el gestor de achivos o bien haciendo uso del terminal ejecutando dentro de la carpeta en la que se encuentre el fichero descargado el siguiente comando:\n$ tar -xvf arduino-1.8.13-linux64.tar.xz   Instalación del IDE Una vez descomprimido podremos hacer uso del archivo install.sh para efectuar la instalación, para ello, nos introducimos en la carpeta que acaba de crearse al descomprimir el fichero y ejecutamos el siguiente comando:\n$ sh install.sh Es posible que requieras premisos de administrador para que el script tenga acceso a los directorios en los que requiere copiar los archivos de la aplicación, en caso de ser así deberíamos de ejecutarlo con permisos de administrador:\n$ sudo sh install.sh Una vez instalado ya podremos abrir el IDE de Arduino y empezar a desarrollar.\n    "
},
{
	"uri": "https://learningcat.tk/2_ohmyzsh/1_install/",
	"title": "Instalación de ZSH y OhMyZsh!",
	"tags": [],
	"description": "",
	"content": "Instalación de la consola zsh sudo apt install zsh Comprueba si está correctamente instalada:\nzsh --version Cambia la consola por defecto del terminal a zsh:\nchsh -s $(which zsh) Para que se apliquen los cambios tendrás que cerrar sesión y volver a iniciar sesión\nInstalación de OhMyZsh sudo apt-get install git-core sh -c \u0026#34;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\u0026#34; "
},
{
	"uri": "https://learningcat.tk/3_git/1_install/",
	"title": "Instalar y configurar",
	"tags": [],
	"description": "",
	"content": "Instalar Git sudo apt install git-all Comprobar la versión de Git instalada git --version Configuración   Mostrar la configuración actual git config --list   Identidad Una vez realizada la instalación, hay que configurar la identidad. La identidad consta de un nombre y un e-mail, esta información servirá para identificar quién ha sido el autor de una acción realizada con git (commit, merge, revert\u0026hellip;).\nPara poder utilizar git es necesario añadir esta información, de lo contrario no nos dejará realizar acciones de escritura.\nConfigurar el nombre git config --global user.name \u0026#34;John Doe\u0026#34; Configurar el e-mail git config --global user.email johndoe@example.com   Editor de texto por defecto También podemos configurar el editor que se abrirá cuando git requiera de editar o añadir algún mensaje. Por defecto, el editor de texto que git usará si no se ha configurado ninguno es el editor de texto por defecto del sistema.\nConfigurar editor de texto git config --global core.editor emacs   "
},
{
	"uri": "https://learningcat.tk/1_python/1_install-run/",
	"title": "Instalar y ejecutar",
	"tags": [],
	"description": "",
	"content": "Instalar Python sudo apt-get update sudo apt-get install python3.6 Comprobar versión de Python instalada python3.6 -V  En este caso la versión base que instalamos es la 3.6, por ello el comando para ejecutar será python3.6, pero dentro de la 3.6 tiene versiones, por defecto se instala la última versión estable disponible\n Ejecutar un fichero Python en un terminal Los ficheros python tienen extensión *.py para ejecutar la aplicación que contiene tendrá que hacerse con el comando python3.6 seguido del fichero. (Tendrá que ejecutarse en la ruta donde se encuentre el fichero)\npython3.6 Ejemplo.py Consola de Python En el terminal podemos ejecutar una consola de python para poder hacer pruebas con código directamente.\n  Abrir la consola de python en un terminal:\npython3.6   Ejecutar comando de ejemplo en consola\nprintln(\u0026#34;Hola mundo\u0026#34;)   Salir o cerrar la consola de python\nexit()   "
},
{
	"uri": "https://learningcat.tk/4_arduino/1_nodemcuboard/",
	"title": "Placa NodeMCU ESP8266",
	"tags": [],
	"description": "",
	"content": "Configuración de la placa, proyectos de ejemplo\u0026hellip; Placa NodeMCU ESP8266 Se trata de una placa de desarrollo que utiliza el firmware opensource NodeMCU y con el módulo Wifi de bajo consumo ESP8266. Esta placa puede programarse usando LUA, MicroPython o Arduino (que es nuestro caso).\nEn esta sección podremos ver cómo configurar la placa con nuestro IDE de Arduino así como ciertos proyectos de ejemplo con los que podremos usar nuestra placa.\n Web oficial: https://www.nodemcu.com/index_en.html GitHub del firmware NodeMCU: https://github.com/nodemcu/nodemcu-firmware Documentación para usar la placa con MicroPython: https://docs.micropython.org/en/latest/esp8266/tutorial/intro.html  "
},
{
	"uri": "https://learningcat.tk/1_python/",
	"title": "Python",
	"tags": [],
	"description": "",
	"content": "Entorno y lenguaje Python En este capítulo se hablará sobre cómo instalar y ejecutar python en un sistema unix, así como un manual sobre el lenguaje.\n Web oficial: https://www.python.org/  "
},
{
	"uri": "https://learningcat.tk/2_ohmyzsh/2_config/",
	"title": "Configuración",
	"tags": [],
	"description": "",
	"content": "Fichero de configuración La configuración del framework se puede cambiar editando el archivo de configuración, se puede editar con un editor de texto por consola como nano:\nnano ~/.zshrc En este fichero hay diversas opciones para configurar, esto se puede realizar cambiando el valor de algún parámetro o descomentando un parámetro que actualmente esta deshabilitado para que tenga efecto.\nAlgunos de los parámetros que podemos modificar para personalizar el aspecto de la consola y ciertos comandos de utilidad son los siguientes:\nAñadir temas Los temas te proporcionan ayudas visuales en la consola, como el nombre de la rama en git, si hay cambios sin commitear etc..\nHay una infinidad de temas, en la documentación del framework dispones de un amplio listado con capturas de pantalla:\nhttps://github.com/robbyrussell/oh-my-zsh/wiki/Themes\nEl tema que viene configurado por defecto es robbyrussell, para poder cambiarlo hay que editar el fichero de configuración hay que cambiar el valor del siguiente parámetro por el nombre del nuevo tema elegido entre comillas dobles:\nZSH_THEME=\u0026#34;robbyrussell\u0026#34; Añadir plugins Los pluggins proporcionan ayudas en la consola, como el plugin de git, en la propia documentación del framework ya hay amplio listado de plugins disponibles:\nhttps://github.com/robbyrussell/oh-my-zsh/wiki/Plugins\nTambién puedes consultar el mismo listado en la carpeta del framework en la que están instalados:\nPor defecto viene habilitado el plugin de git, sin embargo, si se quisieran añadir más plugins basta con añadirlos al listado en el archivo de configuración.\nVamos a ver un ejemplo con el plugin chucknorris. Para ello necesitamos instalar primero fortune, que es una aplicación que al ejecutarla muestra una frase aleatoria, y también cowsay, una aplicación que dibuja una vaca mostrando una frase en el bocadillo.\n#instalación de fortune sudo apt-get install fortune-mod #instalación de cowsay sudo apt-get install cowsay Ahora vamos a habilitar el plugin en la configuración del framework editando el fichero y modificando el parámetro plugins añadiendo el nombre del plugin que queremos habilitar separado con un espacio de los otros plugins del listado:\nplugins=(git chucknorris) Cerraremos y abriremos la consola para aplicar todos los cambios y vermos si nos ha funcionado utilizando los comandos del plugin:\n#Chiste aleatorio de Chuck Norris chuck #Chiste aletaorio de Chuck Norris con una vaca chuck_cow "
},
{
	"uri": "https://learningcat.tk/3_git/2_configssh/",
	"title": "Configurar accesso ssh",
	"tags": [],
	"description": "",
	"content": "Para que podamos realizar modificaciones sobre un repositorio en el que se nos han otorgado permisos podremos hacerlo de dos maneras, o por usuario y contraseña (teniendo que introducir el usuario y contraseña cada vez que queramos subir algún cambio), o bien por ssh.\nPara realizarlo mediante ssh necesitaríamos una clave pública en nuestro equipo, ya sea alguna que ya tuviéramos anteriormente o crear una específica.\nComprobar si existen claves ssh ya creadas Para comprobarlo tendremos que listar los ficheros que se encuentran en el directorio ~/.ssh con el siguiente comando:\nls -al ~/.ssh Si ya hubiera alguna clave creada aparecería un listado de archivos, del listado de claves necesitraíamos las que son públicas y normalente los ficheros suelen tener un nombre similar a los siguientes:\n id_dsa.pub id_ecdsa.pub id_ed25519.pub id_rsa.pub  Si no apareciera ningún fichero con la extensión *.pub tendríamos que crear una clave pública nueva.\nCrear una clave ssh para conectar con github/gitlab   Crear clave ssh Para crear la clave ssh, para ello introduciremos el comando a continuación substituyendo el e-mail de ejemplo por el e-mail con el que nos hayamos registrado en gihub/gitlab\nssh-keygen -t rsa -b 4096 -C \u0026#34;your_email@example.com\u0026#34; Al ejecutarlo nos aparecerán 3 preguntas:\n La primera de ellas nos dará la opción de poner un nombre a nuestra clave ssh, podemos dejarlo en blanco y presionar enter para que tome un nombre por defecto o poner uno a nuestra elección. La clave se guardará en la ruta indicada.  \u0026gt; Enter a file in which to save the key (/home/you/.ssh/id_rsa):   La segunda y tercera pregunta nos dará la opción de configurar una contraseña para nuestra clave ssh. Esto servirá para que cada vez que se vaya a usar nuestra clave ssh nos salga un mensaje de aviso para poder poner esa contraseña que hemos configurado.\nPuede que quizá no queramos que se nos esté pidiendo ninguna contraseña cada vez que tengamos que hacer uso de la clave ssh, para ello simplemente dejándolo en blanco y presionando enter en ambos casos será suficiente.\n```bash \u0026gt; Enter passphrase (empty for no passphrase): [Type a passphrase] \u0026gt; Enter same passphrase again: [Type passphrase again] ```      Añadir clave ssh al ssh-agent Una vez que tenemos creada la clave ssh, tendremos que añadir la clave que queremos utilizar al ssh-agen. Para ello primeramente lo iniciaremos en segundo plano con el siguiente comando:\neval \u0026#34;$(ssh-agent -s)\u0026#34; Una vez arrancado en segundo plano añadiremos nuestra clave ssh privada al ssh-agent. Si has creado tu clave con un nombre diferente, o si estás añadiendo una clave ya existente con un nombre diferente, reemplaza id_rsa en el comando por el nombre de tu clave privada.\nssh-add ~/.ssh/id_rsa   Copiar clave pública en el portapapeles El último paso sería copiar el contenido del fichero de la clave pública para añadirla en Github/Gitlab en la configruación del perfil de usuario, dentro del apartado SSH. El copiar el contenido lo podríamos efectuar de diversas maneras:\n  Abriendo el fichero con un editor de texto y copiando el contenido\n  Mostrando el contenido del archivo por consola mediante el comando cat y copiando el resultado:\ncat ~/.ssh/id_rsa.pub   Con alguna herramienta como por ejemplo xclip:\n  Instalación de xclip:\nsudo apt-get install xclip   Copiar la clave pública con xclip\nEn caso de que nuestra clave pública tenga un nombre diferente tendremos que substituirlo en el comando. ```bash xclip -sel clip \u0026lt; ~/.ssh/id_rsa.pub ```        "
},
{
	"uri": "https://learningcat.tk/2_ohmyzsh/",
	"title": "Oh My Zsh!",
	"tags": [],
	"description": "",
	"content": "Instalación, plugins y temas Oh My Zsh! En este capítulo veremos como instalar un framework para la consola con diversas utilidades.\n Web oficial: https://ohmyz.sh/  "
},
{
	"uri": "https://learningcat.tk/1_python/2_variables/",
	"title": "Variables",
	"tags": [],
	"description": "",
	"content": "Variables en Python   Sintaxis\n  Los nombres de las variables en python tienen que empezar por una letra o bien un guión bajo.\n  Los nombres de las variables son case sensitive por tanto una variable con nombre Numero es diferente a una variable con nombre numero\n  Como convención en programación los nombres de métodos o variables suelen escribirse con el tipo de escritura camel case, la primera letara de cada palabra que conforme el nombre de la variable empezará con mayúscula (y por norma general la primera letra del nombre de la variable será en minúscula).\n  Ejemplo:\nvariablePrimaria\nnombreDePila\n      Asignación de valor\nPara que una variable exista hay que asignarle un valor. Este valor puede ser nulo, o bien tener un valor de un tipo de dato determinado. Esta asignación se puede realizar de manera individual o múltiple\n  Asignación individual\nvariable = 1   Asignación múltiple\n#Asignación de valores diferentes a diferentes variables variable1, variable2, variable3 = 1, 2.1, \u0026#34;Texto\u0026#34; #Asignación del mismo valor a múltiples variables variable1 = variable2 = variable3 = True     Alcance\n Las variables en Python son locales por defecto, es decir, las variables definidas en el bloque de código de una función sólo tienen existencia dentro de la misma. Además, las variables existentes fuera de una función no son visibles dentro de la misma.    Tipo de variable: Globales\n  Si fuera necesario, se puede convertir una variable local en global, para poder indicar en una función que vamos a utilizar una variable global tenemos que declararla explícitamente con la sentencia global dentro de la función.\n  Ejemplo:\nvariable_global = True def start(): global variable_global print \u0026#34;El valor de variable_global es:\u0026#34;, variable_global variable_global = not variable_global print \u0026#34;Ahora el valor de variable_global es:\u0026#34;, variable_global       Tipo de variable: Constantes\n  Las constantes son colocadas dentro de módulos Python que no pueden ser cambiados.\n  Por convención los nombre de las constantes se suelen expresar en mayúsculas y cada palabra separada por un guión bajo.\n  Ejemplo:\nCAMEL_CASE\nVARIABLE_1\n      Tipos de dato\n  Ejemplo:\nvalorNulo = None numeroEnteroInt = 1 cadena = \u0026#34;Hola\u0026#34; flotante = 1.2 booleano = True numeroEnteroLong = 1L numeroComplejo = 3.14j numeroComplejo = 2.1 + 7.8j     "
},
{
	"uri": "https://learningcat.tk/3_git/",
	"title": "Git",
	"tags": [],
	"description": "",
	"content": "Instalación, herramientas y comandos Git En esta sección podremos ver cómo instalar git, algunas herramientas de utilidad y comandos.\n Web oficial: https://git-scm.com/  "
},
{
	"uri": "https://learningcat.tk/4_arduino/",
	"title": "Arduino",
	"tags": [],
	"description": "",
	"content": "IDE, Placas, Proyectos\u0026hellip; Arduino En esta sección podremos ver cómo instalar el IDE arduino, la configuración y uso de distintas placas que lo soportan y algunos proyectos de ejemplos.\n Web oficial: https://arduino.cc/  "
},
{
	"uri": "https://learningcat.tk/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://learningcat.tk/",
	"title": "Learning cat web site",
	"tags": [],
	"description": "",
	"content": "Learning Cat web site Es un compendio de notas, guías u otra información que podría ser útil consultar. Los apuntes de las herramientas, lenguajes o tecnologías que aquí se muestran no están elegidas por popularidad, si no porque podrían ser útiles en un proyecto que actualmente está en una fase muy temprana, se irán añadiendo nuevas secciones en función de lo que se vaya utilizando en dicho proyecto si fueran de interés.Alfonso Madrid [https://github.com/arensis]\n "
},
{
	"uri": "https://learningcat.tk/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]